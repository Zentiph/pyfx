# pylint: disable=all

from typing import Callable, Dict, ParamSpec, Protocol, Tuple, Type, TypeVar, Union

P = ParamSpec("P")
T = TypeVar("T")

class Comparable(Protocol):
    def __lt__(self, other: "Comparable") -> bool: ...
    def __le__(self, other: "Comparable") -> bool: ...
    def __gt__(self, other: "Comparable") -> bool: ...
    def __ge__(self, other: "Comparable") -> bool: ...

def enforce_type(
    arg_name: str, type_or_tuple: Union[Type, Tuple[Type, ...]], strict: bool = False
) -> Callable[[Callable[P, T]], Callable[P, T]]: ...
def enforce_types(
    **type_map: Dict[str, Union[Type, Tuple[Type, ...]]],
) -> Callable[[Callable[P, T]], Callable[P, T]]: ...
def enforce_arg_within(
    arg_name: str, lower_bound: Comparable, upper_bound: Comparable
) -> Callable[[Callable[P, T]], Callable[P, T]]: ...
